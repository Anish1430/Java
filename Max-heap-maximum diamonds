Question:-Using Max-heap--maximum diamonds.

There are N bags with diamonds in them. The i'th of these bags contains A[i] diamonds. If you drop a bag with P diamonds,
it changes to [P/2] diamonds, and you gain P diamonds, where [p] is the greatest integer less than p. 
Dropping a bag takes 1 minute. Find the maximum number of diamonds that you can take if you are given K minutes.

Input Format

Two Integers N and K.
N integers seperated by single space.
Constraints

1 <= N <= 10^5
0 <= K <= 10^5
0 <= A[i] <= 10^5
Output Format

Single Integer representing max diamonds.

Sample Input 0

5 3
2 1 7 4 2
Sample Output 0

14
Explanation 0

The state of bags is: [ 2 1 7 4 2 ]
You take all diamonds from Third bag (7).
The state of bags becomes: [ 2 1 3 4 2 ]
Take all diamonds from Fourth bag (4).
The state of bags becomes: [ 2 1 3 2 2 ]
Take all diamonds from Third bag (3).
The state of bags becomes: [ 2 1 1 2 2 ]
Hence, number of Diamonds = 7+4+3 = 14.


//Solution..................


import java.io.*;
import java.util.*;
public class Solution {
 public static int maximumGolds(int arr[],int k) {
      PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        for(int val : arr) {
            pq.add(val);
        }
       int total=0;
       for(int i=0;i<k;i++)  {
           int curr=pq.remove();
           total=total + curr;
           pq.add(curr/2);
       }
     return total;
 }
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        int arr[]=new int[n];
          for(int i=0;i<n;i++) {
              arr[i]=sc.nextInt();
          }
           int ans=maximumGolds(arr,k);
            System.out.println(ans);
    }
}
