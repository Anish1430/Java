Questions:- Using Max-Heap-max product 2.

Given the array of integers nums, you will choose two different indices i and j of that array.
Return the maximum value of (nums[i]-1)*(nums[j]-1).

Input Format:-

Single Integer N.
N Integers seperated by single spaces.
Constraints

2 <= nums.length <= 500.
1 <= nums[i] <= 10^3.
Output Format

Single Integer max product.

Sample Input 0

4
3 4 5 2
Sample Output 0

12
Explanation 0

If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is,
 (nums[1]-1)(nums[2]-1) = (4-1)(5-1) = 3*4 = 12.


//Solutionimport java.io.*;
import java.util.*;
public class Solution {
  public static void maxProduct(int arr[]) {
      PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        if(arr == null || arr.length < 2) {
            return;
        }
       for(int val : arr) {
           pq.add(val);
       }
      while(pq.size() > 0) {
      int x=pq.remove();
      int y=pq.remove();
      System.out.println((x-1) * (y-1));  
          break;
      }
  }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
          int arr[]=new int[n];
          for(int i=0;i<n;i++) {
              arr[i]=sc.nextInt();
          }
           maxProduct(arr);
    }
}
