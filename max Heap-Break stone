Question:- Using Maximum heap-Break stone;

You are given an array of integers stones where stones[i] is the weight of the  stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. 
Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the weight of the last remaining stone. If there are no stones left, return 0.

NOTE :- After answering the question, attempt the related question in the linked resource to improve your understanding of this question . Click here

Input Format

Single Integer N.
N Integer spaced with single space.
Constraints

1 <= stones.length <= 10^6 
1 <= stones[i] <= 1000
Output Format

Single Integer value of last stone.

Sample Input 0

6
2 7 4 1 8 1
Sample Output 0

1
Explanation 0

We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 1 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.

/////Solutions................

import java.util.*;
public class Solution {
    public static void main(String[] args) {
          Scanner sc=new Scanner(System.in);
          PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
          int n=sc.nextInt();
        for(int i=0;i<n;i++) {
            int x=sc.nextInt();
             pq.add(x);
        }
        while(pq.size() > 1){
            int y=pq.remove();
            int x=pq.remove();
            if(x != y) {
                pq.add(y-x);
            } }
          if(pq.size() == 0) 
               System.out.println(0);
          else {
             System.out.println(pq.peek());
          }
    }
}
